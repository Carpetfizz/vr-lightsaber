<html>
	<head>
		<!-- FIX BUTTON -->
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<script>
			var roomId = "<%= room %>";
		</script>
		<script src="/libs/socket.io-1.3.7.js"></script>
		<script src="/libs/three.min.js"></script>
		<script src="/libs/DeviceOrientationController.js"></script>
		<script src="/libs/OrbitControls.js"></script>
		<script src="/libs/StereoEffect.js"></script>
		<script src="/libs/jquery-2.1.4.min.js"></script>
		<script src="/js/bundle.js"></script>
		<script>
			/* 	
				https://paulbakaus.com/tutorials/html5/web-audio-on-ios/ 
				Safari is LITERALLY the IE of mobile
			*/
			var isMobile;

			isMobile = false;

			if (/Mobi/.test(navigator.userAgent)) {
			   	isMobile = true;
			}
		</script>
		<style>
			body {
				margin: 0;
				overflow: hidden;
				background-color: #2c3e50;
				font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif; 
   				font-weight: 300;
   				color: white;
			}
			a {
				color: white;
			}
			canvas {
				bottom: 0;
				left: 0;
				position: absolute;
				right: 0;
				top: 0;
				width: 100%;
				height: 100%;
				background-color: black;
			}
			.confirm-button {
				width: auto;
				height: auto;
				color: white;
				background-color: #2ecc71;
				display: none;
				margin: 10px;
			}
			.confirm-button span {
				padding: 10px;
				font-size: 18px;
			}
			.landing {
			  display: flex;
			  align-items: center;
			  justify-content: center;
			}

			.align-item {
			  max-width: 50%;
			}
			#room-url{
				font-size: 24px;
			}
			#room-url a {
				text-decoration: none;
			}
		</style>
	</head>
	<body>
		<div class="landing">
			<div class="align-item">
				<center><h1> Lightsaber with Google Cardboard </h1></center>

				<p> Visit this page on one smartphone to use as a Viewer, and go to the link below on another smartphone to use as a Lightsaber </p>
				<center><span id="room-url"><%= roomURL %></span></center>

				<center><div class="confirm-button">
					<span> Connected! </span><br>
					<span> Please rotate your device <br><b> Press this button </b></br> and slide it into Cardboard</span>
				</div></center>

				<h3> What is this? </h3>
				
				<p> 
					This experiment was inspired by <a target="_blank" href="https://lightsaber.withgoogle.com">lightsaber.withgoogle.com</a>, but takes the idea a step further. You will be able to use one smartphone as a control for the lightsaber and the other one to view the immersive VR experience with Google Cardboard. It all runs on a webkit enabled browser such as Safari or Chrome. I'm using free hosting for a rather high bandwidth application so you may notice significant delays. For the best experience, follow the instructions on <a target="_blank" href="https://github.com/Carpetfizz/vr-lightsaber">Github</a> to get the app running locally on your machine.
				</p>

				<h3> How do I use it? </h3>

				<p>
					First get two smartphones which have the latest versions of Safari or Google Chrome. Choose one to use as the Viewer and one to use as the Lightsaber. Open this website on the Viewer device, and you will see a shortlink above. Open the shortlink on the Lightsaber device, and you will see a button appear on the Viewer device. Turn the Viewer sideways, press the button, and insert it into your Google Cardboard. The phone acting as the Lightsaber will control a 3D rendered Lightsaber on the Viewer. Deflect some laser ball things. 
				</p>

				<h3> What technologies are used? </h3>

				<p>
					Both components of this experiment, the Lightsaber and the Viewer, run on the web. They use the latest HTML5 technologies as well as some modern backends. Below is a list of some of the main parts of this application.

					<ul>
						<li>Node.js - Serves web pages, manages the socket.io server</li>
						<li>Socket.io - WebSocket wrapper used to transmit realtime orientation and calibration data from the Lightsaber to Node.js to the Viewer. It also creates unique player sessions which are then mapped to the shortlink.</li>
						<li>THREE.js - WebGL abstraction used for programming the 3D graphics, animations, and collision detection. Data from Socket.io is sent to meshes in THREE.js</li>
						<li>DeviceOrientation Event - Browser API for accessing alpha (z), beta(x), gamma(y) orientation values from device.</li>
					</ul>

					If you want to poke around the source code or even contribute to the project, check it out on <a target="_blank" href="https://github.com/Carpetfizz/vr-lightsaber">Github</a>.

				</p>

				<h3>Who made this? </h3>

				<p>
					This experiment was built by <a href="http://ajayramesh.com">Ajay Ramesh</a>. I love Star Wars almost as much as I love the Web.
				</p>

			</div>
		</div>
		<div id="container">
		</div>
	</body>
</html>